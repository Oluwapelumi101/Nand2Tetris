// bootstrap code
@256
D=A
@SP
M=D
// call Sys.init 0
// Pushing return address onto the stack
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
//@LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//@ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// ARG = SP-n-5
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto f
@Sys.init
0;JMP
// (return-address)
(Sys.init$ret.0)
// function Sys.init 0
(Sys.init)
// push constant 4000
@4000
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
M=M-1
A=M
D=M
@R3
M=D
// push constant 5000
@5000
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 1
@SP
M=M-1
A=M
D=M
@R4
M=D
// call Sys.main 0
// Pushing return address onto the stack
@Sys.main$ret.5
D=A
@SP
A=M
M=D
@SP
M=M+1
//@LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//@ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// ARG = SP-n-5
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto f
@Sys.main
0;JMP
// (return-address)
(Sys.main$ret.5)
// pop temp 1
@5
D=A
@1
D=D+A
@address_6
M=D
@SP
M=M-1
A=M
D=M
@address_6
A=M
M=D
// label LOOP
(LOOP)
// goto LOOP
@LOOP
0;JMP
// function Sys.main 5
(Sys.main)
//Push local 0
@SP
A=M
M=0
@SP
M=M+1
//Push local 1
@SP
A=M
M=0
@SP
M=M+1
//Push local 2
@SP
A=M
M=0
@SP
M=M+1
//Push local 3
@SP
A=M
M=0
@SP
M=M+1
//Push local 4
@SP
A=M
M=0
@SP
M=M+1
// push constant 4001
@4001
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
M=M-1
A=M
D=M
@R3
M=D
// push constant 5001
@5001
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 1
@SP
M=M-1
A=M
D=M
@R4
M=D
// push constant 200
@200
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 1
@LCL
D=M
@1
D=D+A
@address_15
M=D
@SP
M=M-1
A=M
D=M
@address_15
A=M
M=D
// push constant 40
@40
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 2
@LCL
D=M
@2
D=D+A
@address_17
M=D
@SP
M=M-1
A=M
D=M
@address_17
A=M
M=D
// push constant 6
@6
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop local 3
@LCL
D=M
@3
D=D+A
@address_19
M=D
@SP
M=M-1
A=M
D=M
@address_19
A=M
M=D
// push constant 123
@123
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Sys.add12 1
// Pushing return address onto the stack
@Sys.add12$ret.21
D=A
@SP
A=M
M=D
@SP
M=M+1
//@LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//@ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// ARG = SP-n-5
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto f
@Sys.add12
0;JMP
// (return-address)
(Sys.add12$ret.21)
// pop temp 0
@5
D=A
@0
D=D+A
@address_22
M=D
@SP
M=M-1
A=M
D=M
@address_22
A=M
M=D
// push local 0
@0
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 1
@1
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 2
@2
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 3
@3
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push local 4
@4
D=A
@LCL
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@frame
M=D
@5
D=D-A
A=D
D=M
@return_address
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D 
@1
D=A
@frame
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
// function Sys.add12 0
(Sys.add12)
// push constant 4002
@4002
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 0
@SP
M=M-1
A=M
D=M
@R3
M=D
// push constant 5002
@5002
D=A
@SP
A=M
M=D
@SP
M=M+1
// pop pointer 1
@SP
M=M-1
A=M
D=M
@R4
M=D
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 12
@12
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@frame
M=D
@5
D=D-A
A=D
D=M
@return_address
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D 
@1
D=A
@frame
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
