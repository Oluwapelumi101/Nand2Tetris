// bootstrap code
@256
D=A
@SP
M=D
// call Sys.init 0
// Pushing return address onto the stack
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
//@LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//@ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// ARG = SP-n-5
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto f
@Sys.init
0;JMP
// (return-address)
(Sys.init$ret.0)
// function Main.fibonacci 0
(Main.fibonacci)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=D-M
@OUTPUT_TRUE_0
D;JLT
@OUTPUT_STACK_0
D=0
0;JMP
(OUTPUT_TRUE_0)
D=-1
(OUTPUT_STACK_0)
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@IF_TRUE
D;JNE
// goto IF_FALSE
@IF_FALSE
0;JMP
// label IF_TRUE
(IF_TRUE)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@frame
M=D
@5
D=D-A
A=D
D=M
@return_address
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D 
@1
D=A
@frame
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
// label IF_FALSE
(IF_FALSE)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=D-M
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
// Pushing return address onto the stack
@Main.fibonacci$ret.14
D=A
@SP
A=M
M=D
@SP
M=M+1
//@LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//@ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// ARG = SP-n-5
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto f
@Main.fibonacci
0;JMP
// (return-address)
(Main.fibonacci$ret.14)
// push argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=D-M
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
// Pushing return address onto the stack
@Main.fibonacci$ret.18
D=A
@SP
A=M
M=D
@SP
M=M+1
//@LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//@ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// ARG = SP-n-5
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto f
@Main.fibonacci
0;JMP
// (return-address)
(Main.fibonacci$ret.18)
// add
@SP
M=M-1
A=M
D=M
@6
M=D
@SP
M=M-1
A=M
D=M
@6
D=M+D
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@frame
M=D
@5
D=D-A
A=D
D=M
@return_address
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D 
@1
D=A
@frame
D=M-D
A=D
D=M
@THAT
M=D
@2
D=A
@frame
D=M-D
A=D
D=M
@THIS
M=D
@3
D=A
@frame
D=M-D
A=D
D=M
@ARG
M=D
@4
D=A
@frame
D=M-D
A=D
D=M
@LCL
M=D
@return_address
A=M
0;JMP
// function Sys.init 0
(Sys.init)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
// call Main.fibonacci 1
// Pushing return address onto the stack
@Main.fibonacci$ret.23
D=A
@SP
A=M
M=D
@SP
M=M+1
//@LCL
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
//@ARG
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THIS
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
//@THAT
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
// ARG = SP-n-5
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
// LCL = SP
@SP
D=M
@LCL
M=D
// goto f
@Main.fibonacci
0;JMP
// (return-address)
(Main.fibonacci$ret.23)
// label WHILE
(WHILE)
// goto WHILE
@WHILE
0;JMP
